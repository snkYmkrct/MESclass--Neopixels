
Week 7 homework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004afc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cd0  08004cd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000070c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000718  20000718  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bd2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e2  00000000  00000000  00031c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00033ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ee0  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025563  00000000  00000000  00035e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012420  00000000  00000000  0005b3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c17  00000000  00000000  0006d80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156422  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b4  00000000  00000000  00156474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004c90 	.word	0x08004c90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004c90 	.word	0x08004c90

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <Set_LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	b2d9      	uxtb	r1, r3
 8000502:	4a11      	ldr	r2, [pc, #68]	; (8000548 <Set_LED+0x58>)
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	b2d9      	uxtb	r1, r3
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <Set_LED+0x58>)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	4413      	add	r3, r2
 8000516:	460a      	mov	r2, r1
 8000518:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	b2d9      	uxtb	r1, r3
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <Set_LED+0x58>)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	4413      	add	r3, r2
 8000526:	460a      	mov	r2, r1
 8000528:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	b2d9      	uxtb	r1, r3
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <Set_LED+0x58>)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	460a      	mov	r2, r1
 8000538:	70da      	strb	r2, [r3, #3]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200001bc 	.word	0x200001bc

0800054c <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	e036      	b.n	80005ca <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 800055c:	4a2a      	ldr	r2, [pc, #168]	; (8000608 <WS2812_Send+0xbc>)
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4413      	add	r3, r2
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	041a      	lsls	r2, r3, #16
 8000568:	4927      	ldr	r1, [pc, #156]	; (8000608 <WS2812_Send+0xbc>)
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	789b      	ldrb	r3, [r3, #2]
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	431a      	orrs	r2, r3
 8000576:	4924      	ldr	r1, [pc, #144]	; (8000608 <WS2812_Send+0xbc>)
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	78db      	ldrb	r3, [r3, #3]
 8000580:	4313      	orrs	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000584:	2317      	movs	r3, #23
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e019      	b.n	80005be <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800058a:	2201      	movs	r2, #1
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	461a      	mov	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4013      	ands	r3, r2
 8000598:	2b00      	cmp	r3, #0
 800059a:	d005      	beq.n	80005a8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <WS2812_Send+0xc0>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	213c      	movs	r1, #60	; 0x3c
 80005a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005a6:	e004      	b.n	80005b2 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <WS2812_Send+0xc0>)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	211e      	movs	r1, #30
 80005ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3301      	adds	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dae2      	bge.n	800058a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	3301      	adds	r3, #1
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	2b16      	cmp	r3, #22
 80005ce:	ddc5      	ble.n	800055c <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	e00a      	b.n	80005ec <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <WS2812_Send+0xc0>)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2100      	movs	r1, #0
 80005dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	3301      	adds	r3, #1
 80005e4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	2b31      	cmp	r3, #49	; 0x31
 80005f0:	ddf1      	ble.n	80005d6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <WS2812_Send+0xc0>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <WS2812_Send+0xc4>)
 80005fc:	f002 ff02 	bl	8003404 <HAL_TIM_PWM_Start_DMA>
//	while (!datasentflag){};
//	datasentflag = 0;
}
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200001bc 	.word	0x200001bc
 800060c:	20000218 	.word	0x20000218
 8000610:	200000d0 	.word	0x200000d0

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 ff9f 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f8c9 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 fab7 	bl	8000b94 <MX_GPIO_Init>
  MX_CRC_Init();
 8000626:	f000 f981 	bl	800092c <MX_CRC_Init>
  MX_SPI5_Init();
 800062a:	f000 f993 	bl	8000954 <MX_SPI5_Init>
  MX_DMA_Init();
 800062e:	f000 fa91 	bl	8000b54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000632:	f000 fa65 	bl	8000b00 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000636:	f000 f9c3 	bl	80009c0 <MX_TIM1_Init>
  MX_ADC3_Init();
 800063a:	f000 f925 	bl	8000888 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  uint32_t adc_val = 0u;
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]

  Set_LED(0, 255, 0, 0);
 8000642:	2300      	movs	r3, #0
 8000644:	2200      	movs	r2, #0
 8000646:	21ff      	movs	r1, #255	; 0xff
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff ff51 	bl	80004f0 <Set_LED>
  Set_LED(1, 0, 255, 0);
 800064e:	2300      	movs	r3, #0
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	2100      	movs	r1, #0
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff4b 	bl	80004f0 <Set_LED>
  Set_LED(2, 0, 0, 255);
 800065a:	23ff      	movs	r3, #255	; 0xff
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff ff45 	bl	80004f0 <Set_LED>
  Set_LED(3, 46, 89, 128);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	2259      	movs	r2, #89	; 0x59
 800066a:	212e      	movs	r1, #46	; 0x2e
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff ff3f 	bl	80004f0 <Set_LED>
  Set_LED(4, 156, 233, 100);
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	22e9      	movs	r2, #233	; 0xe9
 8000676:	219c      	movs	r1, #156	; 0x9c
 8000678:	2004      	movs	r0, #4
 800067a:	f7ff ff39 	bl	80004f0 <Set_LED>
  Set_LED(5, 102, 0, 235);
 800067e:	23eb      	movs	r3, #235	; 0xeb
 8000680:	2200      	movs	r2, #0
 8000682:	2166      	movs	r1, #102	; 0x66
 8000684:	2005      	movs	r0, #5
 8000686:	f7ff ff33 	bl	80004f0 <Set_LED>
  Set_LED(6, 47, 38, 77);
 800068a:	234d      	movs	r3, #77	; 0x4d
 800068c:	2226      	movs	r2, #38	; 0x26
 800068e:	212f      	movs	r1, #47	; 0x2f
 8000690:	2006      	movs	r0, #6
 8000692:	f7ff ff2d 	bl	80004f0 <Set_LED>
  Set_LED(7, 255, 200, 0);
 8000696:	2300      	movs	r3, #0
 8000698:	22c8      	movs	r2, #200	; 0xc8
 800069a:	21ff      	movs	r1, #255	; 0xff
 800069c:	2007      	movs	r0, #7
 800069e:	f7ff ff27 	bl	80004f0 <Set_LED>
  Set_LED(8, 255, 0, 0);
 80006a2:	2300      	movs	r3, #0
 80006a4:	2200      	movs	r2, #0
 80006a6:	21ff      	movs	r1, #255	; 0xff
 80006a8:	2008      	movs	r0, #8
 80006aa:	f7ff ff21 	bl	80004f0 <Set_LED>
  Set_LED(9, 0, 255, 0);
 80006ae:	2300      	movs	r3, #0
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	2100      	movs	r1, #0
 80006b4:	2009      	movs	r0, #9
 80006b6:	f7ff ff1b 	bl	80004f0 <Set_LED>
  Set_LED(10, 0, 0, 255);
 80006ba:	23ff      	movs	r3, #255	; 0xff
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	200a      	movs	r0, #10
 80006c2:	f7ff ff15 	bl	80004f0 <Set_LED>
  Set_LED(11, 46, 89, 128);
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	2259      	movs	r2, #89	; 0x59
 80006ca:	212e      	movs	r1, #46	; 0x2e
 80006cc:	200b      	movs	r0, #11
 80006ce:	f7ff ff0f 	bl	80004f0 <Set_LED>
  Set_LED(12, 156, 233, 100);
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	22e9      	movs	r2, #233	; 0xe9
 80006d6:	219c      	movs	r1, #156	; 0x9c
 80006d8:	200c      	movs	r0, #12
 80006da:	f7ff ff09 	bl	80004f0 <Set_LED>
  Set_LED(13, 102, 0, 235);
 80006de:	23eb      	movs	r3, #235	; 0xeb
 80006e0:	2200      	movs	r2, #0
 80006e2:	2166      	movs	r1, #102	; 0x66
 80006e4:	200d      	movs	r0, #13
 80006e6:	f7ff ff03 	bl	80004f0 <Set_LED>
  Set_LED(14, 47, 38, 77);
 80006ea:	234d      	movs	r3, #77	; 0x4d
 80006ec:	2226      	movs	r2, #38	; 0x26
 80006ee:	212f      	movs	r1, #47	; 0x2f
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff fefd 	bl	80004f0 <Set_LED>
  Set_LED(15, 255, 200, 0);
 80006f6:	2300      	movs	r3, #0
 80006f8:	22c8      	movs	r2, #200	; 0xc8
 80006fa:	21ff      	movs	r1, #255	; 0xff
 80006fc:	200f      	movs	r0, #15
 80006fe:	f7ff fef7 	bl	80004f0 <Set_LED>
  Set_LED(16, 255, 0, 0);
 8000702:	2300      	movs	r3, #0
 8000704:	2200      	movs	r2, #0
 8000706:	21ff      	movs	r1, #255	; 0xff
 8000708:	2010      	movs	r0, #16
 800070a:	f7ff fef1 	bl	80004f0 <Set_LED>
  Set_LED(17, 0, 255, 0);
 800070e:	2300      	movs	r3, #0
 8000710:	22ff      	movs	r2, #255	; 0xff
 8000712:	2100      	movs	r1, #0
 8000714:	2011      	movs	r0, #17
 8000716:	f7ff feeb 	bl	80004f0 <Set_LED>
  Set_LED(18, 0, 0, 255);
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2012      	movs	r0, #18
 8000722:	f7ff fee5 	bl	80004f0 <Set_LED>
  Set_LED(19, 46, 89, 128);
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	2259      	movs	r2, #89	; 0x59
 800072a:	212e      	movs	r1, #46	; 0x2e
 800072c:	2013      	movs	r0, #19
 800072e:	f7ff fedf 	bl	80004f0 <Set_LED>
  Set_LED(20, 156, 233, 100);
 8000732:	2364      	movs	r3, #100	; 0x64
 8000734:	22e9      	movs	r2, #233	; 0xe9
 8000736:	219c      	movs	r1, #156	; 0x9c
 8000738:	2014      	movs	r0, #20
 800073a:	f7ff fed9 	bl	80004f0 <Set_LED>
  Set_LED(21, 102, 0, 235);
 800073e:	23eb      	movs	r3, #235	; 0xeb
 8000740:	2200      	movs	r2, #0
 8000742:	2166      	movs	r1, #102	; 0x66
 8000744:	2015      	movs	r0, #21
 8000746:	f7ff fed3 	bl	80004f0 <Set_LED>
  Set_LED(22, 47, 38, 77);
 800074a:	234d      	movs	r3, #77	; 0x4d
 800074c:	2226      	movs	r2, #38	; 0x26
 800074e:	212f      	movs	r1, #47	; 0x2f
 8000750:	2016      	movs	r0, #22
 8000752:	f7ff fecd 	bl	80004f0 <Set_LED>


  for (uint8_t i=0; i<23; i++){
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	e002      	b.n	8000762 <main+0x14e>
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3301      	adds	r3, #1
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b16      	cmp	r3, #22
 8000766:	d9f9      	bls.n	800075c <main+0x148>
	  //Set_LED(i, 255, 0, 0);  //red
	  //Set_LED(i, 0, 255, 0);  // green
	  //Set_LED(i, 0, 0, 255);  //blue
	  //Set_LED(i, 255, 255, 255);  //
  }
  WS2812_Send();
 8000768:	f7ff fef0 	bl	800054c <WS2812_Send>
	  //for (uint8_t i=0; i<23; i++){
	//	  Set_LED(i, 125, 125, 0); // yellow
	 // }
	  //WS2812_Send();
	  //HAL_Delay (3000);
	  for (uint8_t i=0; i<23; i++){
 800076c:	2300      	movs	r3, #0
 800076e:	71bb      	strb	r3, [r7, #6]
 8000770:	e008      	b.n	8000784 <main+0x170>
		  Set_LED(i, 255, 0, 0);  //red
 8000772:	79b8      	ldrb	r0, [r7, #6]
 8000774:	2300      	movs	r3, #0
 8000776:	2200      	movs	r2, #0
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	f7ff feb9 	bl	80004f0 <Set_LED>
	  for (uint8_t i=0; i<23; i++){
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	3301      	adds	r3, #1
 8000782:	71bb      	strb	r3, [r7, #6]
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b16      	cmp	r3, #22
 8000788:	d9f3      	bls.n	8000772 <main+0x15e>
	  }
	  WS2812_Send();
 800078a:	f7ff fedf 	bl	800054c <WS2812_Send>
	  //HAL_Delay (3000);
	  for (uint8_t i=0; i<23; i++){
 800078e:	2300      	movs	r3, #0
 8000790:	717b      	strb	r3, [r7, #5]
 8000792:	e008      	b.n	80007a6 <main+0x192>
		  Set_LED(i, 0, 255, 0);  // green
 8000794:	7978      	ldrb	r0, [r7, #5]
 8000796:	2300      	movs	r3, #0
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	2100      	movs	r1, #0
 800079c:	f7ff fea8 	bl	80004f0 <Set_LED>
	  for (uint8_t i=0; i<23; i++){
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	3301      	adds	r3, #1
 80007a4:	717b      	strb	r3, [r7, #5]
 80007a6:	797b      	ldrb	r3, [r7, #5]
 80007a8:	2b16      	cmp	r3, #22
 80007aa:	d9f3      	bls.n	8000794 <main+0x180>
	  }
	  WS2812_Send();
 80007ac:	f7ff fece 	bl	800054c <WS2812_Send>
	  for (uint8_t i=0; i<23; i++){
 80007b0:	e7dc      	b.n	800076c <main+0x158>
	...

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fa5c 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000800:	4a20      	ldr	r2, [pc, #128]	; (8000884 <SystemClock_Config+0xd0>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800082c:	2348      	movs	r3, #72	; 0x48
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000834:	2303      	movs	r3, #3
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f001 ff75 	bl	800272c <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000848:	f000 fc00 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2102      	movs	r1, #2
 8000868:	4618      	mov	r0, r3
 800086a:	f002 f9d7 	bl	8002c1c <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000874:	f000 fbea 	bl	800104c <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	; 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_ADC3_Init+0x98>)
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <MX_ADC3_Init+0x9c>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_ADC3_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_ADC3_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_ADC3_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_ADC3_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_ADC3_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_ADC3_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_ADC3_Init+0x98>)
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_ADC3_Init+0xa0>)
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_ADC3_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_ADC3_Init+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_ADC3_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_ADC3_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <MX_ADC3_Init+0x98>)
 80008e8:	f000 fe7a 	bl	80015e0 <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fbab 	bl	800104c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_ADC3_Init+0x98>)
 8000908:	f000 feae 	bl	8001668 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000912:	f000 fb9b 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000028 	.word	0x20000028
 8000924:	40012200 	.word	0x40012200
 8000928:	0f000001 	.word	0x0f000001

0800092c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_CRC_Init+0x20>)
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <MX_CRC_Init+0x24>)
 8000934:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_CRC_Init+0x20>)
 8000938:	f001 f9a6 	bl	8001c88 <HAL_CRC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000942:	f000 fb83 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000070 	.word	0x20000070
 8000950:	40023000 	.word	0x40023000

08000954 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_SPI5_Init+0x64>)
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <MX_SPI5_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SPI5_Init+0x64>)
 8000960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_SPI5_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_SPI5_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_SPI5_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI5_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_SPI5_Init+0x64>)
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SPI5_Init+0x64>)
 8000988:	2218      	movs	r2, #24
 800098a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_SPI5_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SPI5_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_SPI5_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_SPI5_Init+0x64>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_SPI5_Init+0x64>)
 80009a6:	f002 fb8b 	bl	80030c0 <HAL_SPI_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009b0:	f000 fb4c 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000078 	.word	0x20000078
 80009bc:	40015000 	.word	0x40015000

080009c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b096      	sub	sp, #88	; 0x58
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
 80009ee:	615a      	str	r2, [r3, #20]
 80009f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2220      	movs	r2, #32
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f004 f941 	bl	8004c80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009fe:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a00:	4a3e      	ldr	r2, [pc, #248]	; (8000afc <MX_TIM1_Init+0x13c>)
 8000a02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a04:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a12:	2259      	movs	r2, #89	; 0x59
 8000a14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1c:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a28:	4833      	ldr	r0, [pc, #204]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a2a:	f002 fbd2 	bl	80031d2 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a34:	f000 fb0a 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a42:	4619      	mov	r1, r3
 8000a44:	482c      	ldr	r0, [pc, #176]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a46:	f003 f86f 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a50:	f000 fafc 	bl	800104c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a54:	4828      	ldr	r0, [pc, #160]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a56:	f002 fc7b 	bl	8003350 <HAL_TIM_PWM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a60:	f000 faf4 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a70:	4619      	mov	r1, r3
 8000a72:	4821      	ldr	r0, [pc, #132]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000a74:	f003 fd3c 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 fae5 	bl	800104c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a82:	2360      	movs	r3, #96	; 0x60
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000aa8:	f002 ff7c 	bl	80039a4 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000ab2:	f000 facb 	bl	800104c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ace:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000ada:	f003 fd85 	bl	80045e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ae4:	f000 fab2 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM1_Init+0x138>)
 8000aea:	f000 fbdf 	bl	80012ac <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	; 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000d0 	.word	0x200000d0
 8000afc:	40010000 	.word	0x40010000

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f003 fdbc 	bl	80046b4 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 fa83 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000178 	.word	0x20000178
 8000b50:	40011000 	.word	0x40011000

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_DMA_Init+0x3c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <MX_DMA_Init+0x3c>)
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_DMA_Init+0x3c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2039      	movs	r0, #57	; 0x39
 8000b7c:	f001 f85a 	bl	8001c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b80:	2039      	movs	r0, #57	; 0x39
 8000b82:	f001 f873 	bl	8001c6c <HAL_NVIC_EnableIRQ>

}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	4bb2      	ldr	r3, [pc, #712]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4ab1      	ldr	r2, [pc, #708]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	4bab      	ldr	r3, [pc, #684]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4aaa      	ldr	r2, [pc, #680]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4ba8      	ldr	r3, [pc, #672]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	4ba4      	ldr	r3, [pc, #656]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4aa3      	ldr	r2, [pc, #652]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4ba1      	ldr	r3, [pc, #644]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	4b9d      	ldr	r3, [pc, #628]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a9c      	ldr	r2, [pc, #624]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b9a      	ldr	r3, [pc, #616]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b96      	ldr	r3, [pc, #600]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a95      	ldr	r2, [pc, #596]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b93      	ldr	r3, [pc, #588]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b8f      	ldr	r3, [pc, #572]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a8e      	ldr	r2, [pc, #568]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b8c      	ldr	r3, [pc, #560]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b88      	ldr	r3, [pc, #544]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a87      	ldr	r2, [pc, #540]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b85      	ldr	r3, [pc, #532]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b81      	ldr	r3, [pc, #516]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a80      	ldr	r2, [pc, #512]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b7e      	ldr	r3, [pc, #504]	; (8000e78 <MX_GPIO_Init+0x2e4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2116      	movs	r1, #22
 8000c8e:	487b      	ldr	r0, [pc, #492]	; (8000e7c <MX_GPIO_Init+0x2e8>)
 8000c90:	f001 fd32 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	4879      	ldr	r0, [pc, #484]	; (8000e80 <MX_GPIO_Init+0x2ec>)
 8000c9a:	f001 fd2d 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000ca4:	4877      	ldr	r0, [pc, #476]	; (8000e84 <MX_GPIO_Init+0x2f0>)
 8000ca6:	f001 fd27 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cb0:	4875      	ldr	r0, [pc, #468]	; (8000e88 <MX_GPIO_Init+0x2f4>)
 8000cb2:	f001 fd21 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000cb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	486e      	ldr	r0, [pc, #440]	; (8000e8c <MX_GPIO_Init+0x2f8>)
 8000cd4:	f001 fb64 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cea:	230e      	movs	r3, #14
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4865      	ldr	r0, [pc, #404]	; (8000e8c <MX_GPIO_Init+0x2f8>)
 8000cf6:	f001 fb53 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4859      	ldr	r0, [pc, #356]	; (8000e7c <MX_GPIO_Init+0x2e8>)
 8000d16:	f001 fb43 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d1a:	2316      	movs	r3, #22
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4852      	ldr	r0, [pc, #328]	; (8000e7c <MX_GPIO_Init+0x2e8>)
 8000d32:	f001 fb35 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d36:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	484c      	ldr	r0, [pc, #304]	; (8000e80 <MX_GPIO_Init+0x2ec>)
 8000d4e:	f001 fb27 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000d52:	f641 0358 	movw	r3, #6232	; 0x1858
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d64:	230e      	movs	r3, #14
 8000d66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4844      	ldr	r0, [pc, #272]	; (8000e80 <MX_GPIO_Init+0x2ec>)
 8000d70:	f001 fb16 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	483d      	ldr	r0, [pc, #244]	; (8000e80 <MX_GPIO_Init+0x2ec>)
 8000d8c:	f001 fb08 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d90:	2320      	movs	r3, #32
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d94:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4835      	ldr	r0, [pc, #212]	; (8000e7c <MX_GPIO_Init+0x2e8>)
 8000da6:	f001 fafb 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000daa:	2303      	movs	r3, #3
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dba:	2309      	movs	r3, #9
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4832      	ldr	r0, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x2fc>)
 8000dc6:	f001 faeb 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	482c      	ldr	r0, [pc, #176]	; (8000e90 <MX_GPIO_Init+0x2fc>)
 8000dde:	f001 fadf 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000de2:	f248 1333 	movw	r3, #33075	; 0x8133
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000df4:	230c      	movs	r3, #12
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_GPIO_Init+0x2f4>)
 8000e00:	f001 face 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D7_Pin D8_Pin
                           D9_Pin D10_Pin D11_Pin D12_Pin
                           NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D7_Pin|D8_Pin
 8000e04:	f64f 5383 	movw	r3, #64899	; 0xfd83
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
                          |D9_Pin|D10_Pin|D11_Pin|D12_Pin
                          |NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e16:	230c      	movs	r3, #12
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_GPIO_Init+0x300>)
 8000e22:	f001 fabd 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e26:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_GPIO_Init+0x2fc>)
 8000e44:	f001 faac 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000e48:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <MX_GPIO_Init+0x2fc>)
 8000e66:	f001 fa9b 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e74:	e010      	b.n	8000e98 <MX_GPIO_Init+0x304>
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40020400 	.word	0x40020400
 8000e94:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	485c      	ldr	r0, [pc, #368]	; (8001014 <MX_GPIO_Init+0x480>)
 8000ea4:	f001 fa7c 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000ea8:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4854      	ldr	r0, [pc, #336]	; (8001018 <MX_GPIO_Init+0x484>)
 8000ec6:	f001 fa6b 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	484e      	ldr	r0, [pc, #312]	; (8001018 <MX_GPIO_Init+0x484>)
 8000ee0:	f001 fa5e 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ee4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4846      	ldr	r0, [pc, #280]	; (8001018 <MX_GPIO_Init+0x484>)
 8000efe:	f001 fa4f 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f02:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f14:	230e      	movs	r3, #14
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	483f      	ldr	r0, [pc, #252]	; (800101c <MX_GPIO_Init+0x488>)
 8000f20:	f001 fa3e 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f24:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f36:	230e      	movs	r3, #14
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4837      	ldr	r0, [pc, #220]	; (8001020 <MX_GPIO_Init+0x48c>)
 8000f42:	f001 fa2d 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	482f      	ldr	r0, [pc, #188]	; (8001020 <MX_GPIO_Init+0x48c>)
 8000f64:	f001 fa1c 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4827      	ldr	r0, [pc, #156]	; (8001024 <MX_GPIO_Init+0x490>)
 8000f86:	f001 fa0b 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f8a:	2348      	movs	r3, #72	; 0x48
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f9a:	230e      	movs	r3, #14
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481c      	ldr	r0, [pc, #112]	; (8001018 <MX_GPIO_Init+0x484>)
 8000fa6:	f001 f9fb 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000faa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4815      	ldr	r0, [pc, #84]	; (800101c <MX_GPIO_Init+0x488>)
 8000fc8:	f001 f9ea 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000fcc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_GPIO_Init+0x488>)
 8000fe6:	f001 f9db 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <MX_GPIO_Init+0x480>)
 8001006:	f001 f9cb 	bl	80023a0 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3738      	adds	r7, #56	; 0x38
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020400 	.word	0x40020400
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021800 	.word	0x40021800
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800103a:	f000 fab1 	bl	80015a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40001000 	.word	0x40001000

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_MspInit+0x4c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_ADC_MspInit+0x7c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d127      	bne.n	800111a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010f0:	f043 0320 	orr.w	r3, r3, #32
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_ADC_MspInit+0x80>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001102:	2340      	movs	r3, #64	; 0x40
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	2303      	movs	r3, #3
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_ADC_MspInit+0x84>)
 8001116:	f001 f943 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40012200 	.word	0x40012200
 8001128:	40023800 	.word	0x40023800
 800112c:	40021400 	.word	0x40021400

08001130 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_CRC_MspInit+0x3c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10d      	bne.n	800115e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_CRC_MspInit+0x40>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_CRC_MspInit+0x40>)
 800114c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_CRC_MspInit+0x40>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023000 	.word	0x40023000
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12c      	bne.n	80011f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SPI_MspInit+0x88>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011e0:	2305      	movs	r3, #5
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_SPI_MspInit+0x8c>)
 80011ec:	f001 f8d8 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40015000 	.word	0x40015000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021400 	.word	0x40021400

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_TIM_Base_MspInit+0x98>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d13e      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_TIM_Base_MspInit+0x9c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_TIM_Base_MspInit+0x9c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_TIM_Base_MspInit+0x9c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <HAL_TIM_Base_MspInit+0xa4>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 800123a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800123e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800125a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 800126c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001270:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 800127a:	f000 fd21 	bl	8001cc0 <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001284:	f7ff fee2 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
 800128e:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <HAL_TIM_Base_MspInit+0xa0>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010000 	.word	0x40010000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	20000118 	.word	0x20000118
 80012a8:	40026428 	.word	0x40026428

080012ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_TIM_MspPostInit+0x68>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d11e      	bne.n	800130c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_TIM_MspPostInit+0x6c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <HAL_TIM_MspPostInit+0x6c>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_TIM_MspPostInit+0x6c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_TIM_MspPostInit+0x70>)
 8001308:	f001 f84a 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40010000 	.word	0x40010000
 8001318:	40023800 	.word	0x40023800
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12c      	bne.n	800139c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_UART_MspInit+0x88>)
 800134c:	f043 0310 	orr.w	r3, r3, #16
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800137a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800138c:	2307      	movs	r3, #7
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_UART_MspInit+0x8c>)
 8001398:	f001 f802 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40011000 	.word	0x40011000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	2036      	movs	r0, #54	; 0x36
 80013c6:	f000 fc35 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013ca:	2036      	movs	r0, #54	; 0x36
 80013cc:	f000 fc4e 	bl	8001c6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_InitTick+0xa4>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_InitTick+0xa4>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_InitTick+0xa4>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ec:	f107 0210 	add.w	r2, r7, #16
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fe30 	bl	800305c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013fc:	f001 fe06 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8001400:	4603      	mov	r3, r0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_InitTick+0xa8>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3b01      	subs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_InitTick+0xac>)
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_InitTick+0xb0>)
 8001418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_InitTick+0xac>)
 800141c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_InitTick+0xac>)
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_InitTick+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_InitTick+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <HAL_InitTick+0xac>)
 8001436:	f001 fecc 	bl	80031d2 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d104      	bne.n	800144a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <HAL_InitTick+0xac>)
 8001442:	f001 ff15 	bl	8003270 <HAL_TIM_Base_Start_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	431bde83 	.word	0x431bde83
 800145c:	200006cc 	.word	0x200006cc
 8001460:	40001000 	.word	0x40001000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM6_DAC_IRQHandler+0x10>)
 80014c2:	f002 f967 	bl	8003794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200006cc 	.word	0x200006cc

080014d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <DMA2_Stream1_IRQHandler+0x10>)
 80014d6:	f000 fcf9 	bl	8001ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000118 	.word	0x20000118

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001524:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd7 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f003 fb7f 	bl	8004c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff f86b 	bl	8000614 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001540:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800154c:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8001550:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001554:	20000718 	.word	0x20000718

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_Init+0x40>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_Init+0x40>)
 8001572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x40>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fb4a 	bl	8001c1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff ff10 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fd62 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000714 	.word	0x20000714

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000714 	.word	0x20000714

080015e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e033      	b.n	800165e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fd52 	bl	80010a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001626:	f023 0302 	bic.w	r3, r3, #2
 800162a:	f043 0202 	orr.w	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f94a 	bl	80018cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f023 0303 	bic.w	r3, r3, #3
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
 800164e:	e001      	b.n	8001654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1c>
 8001680:	2302      	movs	r3, #2
 8001682:	e113      	b.n	80018ac <HAL_ADC_ConfigChannel+0x244>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b09      	cmp	r3, #9
 8001692:	d925      	bls.n	80016e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68d9      	ldr	r1, [r3, #12]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	3b1e      	subs	r3, #30
 80016aa:	2207      	movs	r2, #7
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43da      	mvns	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	400a      	ands	r2, r1
 80016b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68d9      	ldr	r1, [r3, #12]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4403      	add	r3, r0
 80016d2:	3b1e      	subs	r3, #30
 80016d4:	409a      	lsls	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	e022      	b.n	8001726 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6919      	ldr	r1, [r3, #16]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	2207      	movs	r2, #7
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	400a      	ands	r2, r1
 8001702:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6919      	ldr	r1, [r3, #16]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	4603      	mov	r3, r0
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4403      	add	r3, r0
 800171c:	409a      	lsls	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b06      	cmp	r3, #6
 800172c:	d824      	bhi.n	8001778 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b05      	subs	r3, #5
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b05      	subs	r3, #5
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	; 0x34
 8001776:	e04c      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d824      	bhi.n	80017ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b23      	subs	r3, #35	; 0x23
 8001792:	221f      	movs	r2, #31
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43da      	mvns	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	400a      	ands	r2, r1
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	3b23      	subs	r3, #35	; 0x23
 80017bc:	fa00 f203 	lsl.w	r2, r0, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
 80017c8:	e023      	b.n	8001812 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b41      	subs	r3, #65	; 0x41
 80017dc:	221f      	movs	r2, #31
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b41      	subs	r3, #65	; 0x41
 8001806:	fa00 f203 	lsl.w	r2, r0, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_ADC_ConfigChannel+0x250>)
 8001814:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_ADC_ConfigChannel+0x254>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d10f      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1d8>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b12      	cmp	r3, #18
 8001826:	d10b      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_ADC_ConfigChannel+0x254>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12b      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x23a>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <HAL_ADC_ConfigChannel+0x258>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d003      	beq.n	800185c <HAL_ADC_ConfigChannel+0x1f4>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b11      	cmp	r3, #17
 800185a:	d122      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_ADC_ConfigChannel+0x258>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d111      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_ADC_ConfigChannel+0x25c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_ADC_ConfigChannel+0x260>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	0c9a      	lsrs	r2, r3, #18
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001894:	e002      	b.n	800189c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3b01      	subs	r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f9      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40012300 	.word	0x40012300
 80018bc:	40012000 	.word	0x40012000
 80018c0:	10000012 	.word	0x10000012
 80018c4:	20000000 	.word	0x20000000
 80018c8:	431bde83 	.word	0x431bde83

080018cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d4:	4b79      	ldr	r3, [pc, #484]	; (8001abc <ADC_Init+0x1f0>)
 80018d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001900:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	021a      	lsls	r2, r3, #8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6899      	ldr	r1, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <ADC_Init+0x1f4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d022      	beq.n	80019aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001972:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6899      	ldr	r1, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001994:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6899      	ldr	r1, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	e00f      	b.n	80019ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0202 	bic.w	r2, r2, #2
 80019d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7e1b      	ldrb	r3, [r3, #24]
 80019e4:	005a      	lsls	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01b      	beq.n	8001a30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	3b01      	subs	r3, #1
 8001a24:	035a      	lsls	r2, r3, #13
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	e007      	b.n	8001a40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	051a      	lsls	r2, r3, #20
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6899      	ldr	r1, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a82:	025a      	lsls	r2, r3, #9
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	029a      	lsls	r2, r3, #10
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40012300 	.word	0x40012300
 8001ac0:	0f000001 	.word	0x0f000001

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	60d3      	str	r3, [r2, #12]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff4c 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c46:	f7ff ff61 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	6978      	ldr	r0, [r7, #20]
 8001c52:	f7ff ffb1 	bl	8001bb8 <NVIC_EncodePriority>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff80 	bl	8001b64 <__NVIC_SetPriority>
}
 8001c64:	bf00      	nop
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff54 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	795b      	ldrb	r3, [r3, #5]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fa40 	bl	8001130 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff fc7c 	bl	80015c8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e099      	b.n	8001e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0201 	bic.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	e00f      	b.n	8001d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cfe:	f7ff fc63 	bl	80015c8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d908      	bls.n	8001d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e078      	b.n	8001e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1e8      	bne.n	8001cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <HAL_DMA_Init+0x158>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4313      	orrs	r3, r2
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d117      	bne.n	8001de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fa6f 	bl	80022a8 <DMA_CheckFifoParam>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dde:	2301      	movs	r3, #1
 8001de0:	e016      	b.n	8001e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fa26 	bl	800223c <DMA_CalcBaseAndBitshift>
 8001df0:	4603      	mov	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	f010803f 	.word	0xf010803f

08001e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_DMA_Start_IT+0x26>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e040      	b.n	8001ec4 <HAL_DMA_Start_IT+0xa8>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d12f      	bne.n	8001eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f9b8 	bl	80021e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0216 	orr.w	r2, r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0208 	orr.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e005      	b.n	8001ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed8:	4b8e      	ldr	r3, [pc, #568]	; (8002114 <HAL_DMA_IRQHandler+0x248>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a8e      	ldr	r2, [pc, #568]	; (8002118 <HAL_DMA_IRQHandler+0x24c>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01a      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0204 	bic.w	r2, r2, #4
 8001f1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2208      	movs	r2, #8
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d012      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f043 0202 	orr.w	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2204      	movs	r2, #4
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d012      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00b      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2204      	movs	r2, #4
 8001f92:	409a      	lsls	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0204 	orr.w	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	2210      	movs	r2, #16
 8001faa:	409a      	lsls	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d043      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d03c      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d018      	beq.n	800200e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d024      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
 8001ffa:	e01f      	b.n	800203c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e016      	b.n	800203c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0208 	bic.w	r2, r2, #8
 800202a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2220      	movs	r2, #32
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 808f 	beq.w	800216c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8087 	beq.w	800216c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	2220      	movs	r2, #32
 8002064:	409a      	lsls	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b05      	cmp	r3, #5
 8002074:	d136      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0216 	bic.w	r2, r2, #22
 8002084:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002094:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <HAL_DMA_IRQHandler+0x1da>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0208 	bic.w	r2, r2, #8
 80020b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ba:	223f      	movs	r2, #63	; 0x3f
 80020bc:	409a      	lsls	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07e      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
        }
        return;
 80020e2:	e079      	b.n	80021d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10d      	bne.n	800211c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	2b00      	cmp	r3, #0
 8002106:	d031      	beq.n	800216c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e02c      	b.n	800216c <HAL_DMA_IRQHandler+0x2a0>
 8002112:	bf00      	nop
 8002114:	20000000 	.word	0x20000000
 8002118:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d023      	beq.n	800216c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e01e      	b.n	800216c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10f      	bne.n	800215c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0210 	bic.w	r2, r2, #16
 800214a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	2b00      	cmp	r3, #0
 8002172:	d032      	beq.n	80021da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d022      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2205      	movs	r2, #5
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3301      	adds	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d307      	bcc.n	80021b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f2      	bne.n	8002198 <HAL_DMA_IRQHandler+0x2cc>
 80021b2:	e000      	b.n	80021b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
 80021d6:	e000      	b.n	80021da <HAL_DMA_IRQHandler+0x30e>
        return;
 80021d8:	bf00      	nop
    }
  }
}
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d108      	bne.n	8002220 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800221e:	e007      	b.n	8002230 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b10      	subs	r3, #16
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <DMA_CalcBaseAndBitshift+0x64>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d909      	bls.n	800227e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002272:	f023 0303 	bic.w	r3, r3, #3
 8002276:	1d1a      	adds	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	659a      	str	r2, [r3, #88]	; 0x58
 800227c:	e007      	b.n	800228e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	aaaaaaab 	.word	0xaaaaaaab
 80022a4:	08004cc0 	.word	0x08004cc0

080022a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11f      	bne.n	8002302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d856      	bhi.n	8002376 <DMA_CheckFifoParam+0xce>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <DMA_CheckFifoParam+0x28>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022f3 	.word	0x080022f3
 80022d8:	080022e1 	.word	0x080022e1
 80022dc:	08002377 	.word	0x08002377
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d046      	beq.n	800237a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f0:	e043      	b.n	800237a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022fa:	d140      	bne.n	800237e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002300:	e03d      	b.n	800237e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230a:	d121      	bne.n	8002350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d837      	bhi.n	8002382 <DMA_CheckFifoParam+0xda>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <DMA_CheckFifoParam+0x70>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	0800232f 	.word	0x0800232f
 8002320:	08002329 	.word	0x08002329
 8002324:	08002341 	.word	0x08002341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      break;
 800232c:	e030      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d025      	beq.n	8002386 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233e:	e022      	b.n	8002386 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002348:	d11f      	bne.n	800238a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800234e:	e01c      	b.n	800238a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d903      	bls.n	800235e <DMA_CheckFifoParam+0xb6>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d003      	beq.n	8002364 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800235c:	e018      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      break;
 8002362:	e015      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00e      	beq.n	800238e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e00b      	b.n	800238e <DMA_CheckFifoParam+0xe6>
      break;
 8002376:	bf00      	nop
 8002378:	e00a      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e008      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e006      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e004      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e002      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;   
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
    }
  } 
  
  return status; 
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e177      	b.n	80026ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8166 	bne.w	80026a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d005      	beq.n	80023f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d130      	bne.n	8002454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 0201 	and.w	r2, r3, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d017      	beq.n	8002490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d123      	bne.n	80024e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	08da      	lsrs	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3208      	adds	r2, #8
 80024a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80c0 	beq.w	80026a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <HAL_GPIO_Init+0x324>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a65      	ldr	r2, [pc, #404]	; (80026c4 <HAL_GPIO_Init+0x324>)
 8002530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_GPIO_Init+0x324>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002542:	4a61      	ldr	r2, [pc, #388]	; (80026c8 <HAL_GPIO_Init+0x328>)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_GPIO_Init+0x32c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d037      	beq.n	80025de <HAL_GPIO_Init+0x23e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_GPIO_Init+0x330>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d031      	beq.n	80025da <HAL_GPIO_Init+0x23a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <HAL_GPIO_Init+0x334>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02b      	beq.n	80025d6 <HAL_GPIO_Init+0x236>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_GPIO_Init+0x338>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d025      	beq.n	80025d2 <HAL_GPIO_Init+0x232>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_GPIO_Init+0x33c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01f      	beq.n	80025ce <HAL_GPIO_Init+0x22e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_GPIO_Init+0x340>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d019      	beq.n	80025ca <HAL_GPIO_Init+0x22a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x344>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0x226>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_GPIO_Init+0x348>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_Init+0x222>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_GPIO_Init+0x34c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_Init+0x21e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <HAL_GPIO_Init+0x350>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_Init+0x21a>
 80025b6:	2309      	movs	r3, #9
 80025b8:	e012      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025ba:	230a      	movs	r3, #10
 80025bc:	e010      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025be:	2308      	movs	r3, #8
 80025c0:	e00e      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025c2:	2307      	movs	r3, #7
 80025c4:	e00c      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025c6:	2306      	movs	r3, #6
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x240>
 80025de:	2300      	movs	r3, #0
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f0:	4935      	ldr	r1, [pc, #212]	; (80026c8 <HAL_GPIO_Init+0x328>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_GPIO_Init+0x354>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002622:	4a34      	ldr	r2, [pc, #208]	; (80026f4 <HAL_GPIO_Init+0x354>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002628:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <HAL_GPIO_Init+0x354>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800264c:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <HAL_GPIO_Init+0x354>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002652:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_GPIO_Init+0x354>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_GPIO_Init+0x354>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_GPIO_Init+0x354>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_GPIO_Init+0x354>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	f67f ae84 	bls.w	80023bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40021c00 	.word	0x40021c00
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40022400 	.word	0x40022400
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002714:	e003      	b.n	800271e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	041a      	lsls	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e267      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d075      	beq.n	8002836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b04      	cmp	r3, #4
 8002754:	d00c      	beq.n	8002770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b85      	ldr	r3, [pc, #532]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	2b08      	cmp	r3, #8
 8002760:	d112      	bne.n	8002788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002762:	4b82      	ldr	r3, [pc, #520]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b7e      	ldr	r3, [pc, #504]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05b      	beq.n	8002834 <HAL_RCC_OscConfig+0x108>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d157      	bne.n	8002834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e242      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x74>
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a75      	ldr	r2, [pc, #468]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xb0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x98>
 80027aa:	4b70      	ldr	r3, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6f      	ldr	r2, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b6d      	ldr	r3, [pc, #436]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6c      	ldr	r2, [pc, #432]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xb0>
 80027c4:	4b69      	ldr	r3, [pc, #420]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fef0 	bl	80015c8 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe feec 	bl	80015c8 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e207      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xc0>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fedc 	bl	80015c8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fed8 	bl	80015c8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1f3      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b51      	ldr	r3, [pc, #324]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0xe8>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_RCC_OscConfig+0x240>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x152>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1c7      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4937      	ldr	r1, [pc, #220]	; (800296c <HAL_RCC_OscConfig+0x240>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e03a      	b.n	800290a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCC_OscConfig+0x244>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7fe fe91 	bl	80015c8 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fe fe8d 	bl	80015c8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1a8      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4925      	ldr	r1, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x240>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x244>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fe70 	bl	80015c8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fe fe6c 	bl	80015c8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e187      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d036      	beq.n	8002984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_RCC_OscConfig+0x248>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fe50 	bl	80015c8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fe4c 	bl	80015c8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e167      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x240>)
 8002940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x200>
 800294a:	e01b      	b.n	8002984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_OscConfig+0x248>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe fe39 	bl	80015c8 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e00e      	b.n	8002978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe fe35 	bl	80015c8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d907      	bls.n	8002978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e150      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
 800296c:	40023800 	.word	0x40023800
 8002970:	42470000 	.word	0x42470000
 8002974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 800297a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ea      	bne.n	800295a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8097 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	4b7d      	ldr	r3, [pc, #500]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a7c      	ldr	r2, [pc, #496]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b77      	ldr	r3, [pc, #476]	; (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b74      	ldr	r3, [pc, #464]	; (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a73      	ldr	r2, [pc, #460]	; (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fe fdf5 	bl	80015c8 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe fdf1 	bl	80015c8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e10c      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x2ea>
 8002a08:	4b64      	ldr	r3, [pc, #400]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a63      	ldr	r2, [pc, #396]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	e01c      	b.n	8002a50 <HAL_RCC_OscConfig+0x324>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x30c>
 8002a1e:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a5e      	ldr	r2, [pc, #376]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x324>
 8002a38:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b55      	ldr	r3, [pc, #340]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fdb6 	bl	80015c8 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fdb2 	bl	80015c8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0cb      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	4b49      	ldr	r3, [pc, #292]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ee      	beq.n	8002a60 <HAL_RCC_OscConfig+0x334>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fda0 	bl	80015c8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fd9c 	bl	80015c8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0b5      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ee      	bne.n	8002a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a1 	beq.w	8002c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d05c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d141      	bne.n	8002b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b31      	ldr	r3, [pc, #196]	; (8002ba4 <HAL_RCC_OscConfig+0x478>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd70 	bl	80015c8 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fd6c 	bl	80015c8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e087      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	491b      	ldr	r1, [pc, #108]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x478>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fd45 	bl	80015c8 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe fd41 	bl	80015c8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e05c      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x416>
 8002b60:	e054      	b.n	8002c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_RCC_OscConfig+0x478>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fd2e 	bl	80015c8 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fd2a 	bl	80015c8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e045      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x444>
 8002b8e:	e03d      	b.n	8002c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e038      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x4ec>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d028      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d121      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d11a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d111      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0cc      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d90c      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a58      	ldr	r2, [pc, #352]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d044      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d119      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e067      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 0203 	bic.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fc5c 	bl	80015c8 <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe fc58 	bl	80015c8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e04f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 020c 	and.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1eb      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d20c      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b22      	ldr	r3, [pc, #136]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f821 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	; (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe faf4 	bl	80013b0 <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08004ca8 	.word	0x08004ca8
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b094      	sub	sp, #80	; 0x50
 8002dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
 8002df4:	2300      	movs	r3, #0
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002df8:	2300      	movs	r3, #0
 8002dfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x40>
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	f200 80e1 	bhi.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x34>
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1a:	e0db      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCC_GetSysClockFreq+0x204>)
 8002e1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e20:	e0db      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e22:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e26:	e0d8      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e28:	4b6f      	ldr	r3, [pc, #444]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e32:	4b6d      	ldr	r3, [pc, #436]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d063      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	2200      	movs	r2, #0
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
 8002e52:	2300      	movs	r3, #0
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
 8002e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	462b      	mov	r3, r5
 8002e5e:	f04f 0000 	mov.w	r0, #0
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	0159      	lsls	r1, r3, #5
 8002e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e6c:	0150      	lsls	r0, r2, #5
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4621      	mov	r1, r4
 8002e74:	1a51      	subs	r1, r2, r1
 8002e76:	6139      	str	r1, [r7, #16]
 8002e78:	4629      	mov	r1, r5
 8002e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	018b      	lsls	r3, r1, #6
 8002e90:	4651      	mov	r1, sl
 8002e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e96:	4651      	mov	r1, sl
 8002e98:	018a      	lsls	r2, r1, #6
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eba:	4690      	mov	r8, r2
 8002ebc:	4699      	mov	r9, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	eb18 0303 	adds.w	r3, r8, r3
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	462b      	mov	r3, r5
 8002ec8:	eb49 0303 	adc.w	r3, r9, r3
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eda:	4629      	mov	r1, r5
 8002edc:	024b      	lsls	r3, r1, #9
 8002ede:	4621      	mov	r1, r4
 8002ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	024a      	lsls	r2, r1, #9
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	2200      	movs	r2, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ef8:	f7fd f978 	bl	80001ec <__aeabi_uldivmod>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4613      	mov	r3, r2
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f04:	e058      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4611      	mov	r1, r2
 8002f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f20:	4642      	mov	r2, r8
 8002f22:	464b      	mov	r3, r9
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	0159      	lsls	r1, r3, #5
 8002f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f32:	0150      	lsls	r0, r2, #5
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4641      	mov	r1, r8
 8002f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f3e:	4649      	mov	r1, r9
 8002f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f58:	ebb2 040a 	subs.w	r4, r2, sl
 8002f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	00eb      	lsls	r3, r5, #3
 8002f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f6e:	00e2      	lsls	r2, r4, #3
 8002f70:	4614      	mov	r4, r2
 8002f72:	461d      	mov	r5, r3
 8002f74:	4643      	mov	r3, r8
 8002f76:	18e3      	adds	r3, r4, r3
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	eb45 0303 	adc.w	r3, r5, r3
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f8e:	4629      	mov	r1, r5
 8002f90:	028b      	lsls	r3, r1, #10
 8002f92:	4621      	mov	r1, r4
 8002f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f98:	4621      	mov	r1, r4
 8002f9a:	028a      	lsls	r2, r1, #10
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	61fa      	str	r2, [r7, #28]
 8002fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fac:	f7fd f91e 	bl	80001ec <__aeabi_uldivmod>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fd2:	e002      	b.n	8002fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetSysClockFreq+0x204>)
 8002fd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3750      	adds	r7, #80	; 0x50
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	007a1200 	.word	0x007a1200

08002ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003010:	f7ff fff0 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	0a9b      	lsrs	r3, r3, #10
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40023800 	.word	0x40023800
 8003030:	08004cb8 	.word	0x08004cb8

08003034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003038:	f7ff ffdc 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	0b5b      	lsrs	r3, r3, #13
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	08004cb8 	.word	0x08004cb8

0800305c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	220f      	movs	r2, #15
 800306a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_RCC_GetClockConfig+0x60>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40023c00 	.word	0x40023c00

080030c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e07b      	b.n	80031ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e2:	d009      	beq.n	80030f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
 80030ea:	e005      	b.n	80030f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f82e 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	ea42 0103 	orr.w	r1, r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	f003 0104 	and.w	r1, r3, #4
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 0210 	and.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e041      	b.n	8003268 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe f803 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 fe5d 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e04e      	b.n	8003326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <HAL_TIM_Base_Start_IT+0xc4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d01d      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1e      	ldr	r2, [pc, #120]	; (800333c <HAL_TIM_Base_Start_IT+0xcc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_TIM_Base_Start_IT+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_TIM_Base_Start_IT+0xd4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_TIM_Base_Start_IT+0xd8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <HAL_TIM_Base_Start_IT+0xdc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d010      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	e007      	b.n	8003324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40010400 	.word	0x40010400
 8003348:	40014000 	.word	0x40014000
 800334c:	40001800 	.word	0x40001800

08003350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f839 	bl	80033ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fd9e 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_TIM_PWM_Start_DMA+0x2c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e022      	b.n	8003476 <HAL_TIM_PWM_Start_DMA+0x72>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d109      	bne.n	800344a <HAL_TIM_PWM_Start_DMA+0x46>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e015      	b.n	8003476 <HAL_TIM_PWM_Start_DMA+0x72>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d109      	bne.n	8003464 <HAL_TIM_PWM_Start_DMA+0x60>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e008      	b.n	8003476 <HAL_TIM_PWM_Start_DMA+0x72>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e171      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_TIM_PWM_Start_DMA+0x94>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e022      	b.n	80034de <HAL_TIM_PWM_Start_DMA+0xda>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d109      	bne.n	80034b2 <HAL_TIM_PWM_Start_DMA+0xae>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e015      	b.n	80034de <HAL_TIM_PWM_Start_DMA+0xda>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d109      	bne.n	80034cc <HAL_TIM_PWM_Start_DMA+0xc8>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e008      	b.n	80034de <HAL_TIM_PWM_Start_DMA+0xda>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d024      	beq.n	800352c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <HAL_TIM_PWM_Start_DMA+0xee>
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e137      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_PWM_Start_DMA+0xfe>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003500:	e016      	b.n	8003530 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	e00e      	b.n	8003530 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	e006      	b.n	8003530 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800352a:	e001      	b.n	8003530 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e118      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	f200 80ae 	bhi.w	8003694 <HAL_TIM_PWM_Start_DMA+0x290>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003575 	.word	0x08003575
 8003544:	08003695 	.word	0x08003695
 8003548:	08003695 	.word	0x08003695
 800354c:	08003695 	.word	0x08003695
 8003550:	080035bd 	.word	0x080035bd
 8003554:	08003695 	.word	0x08003695
 8003558:	08003695 	.word	0x08003695
 800355c:	08003695 	.word	0x08003695
 8003560:	08003605 	.word	0x08003605
 8003564:	08003695 	.word	0x08003695
 8003568:	08003695 	.word	0x08003695
 800356c:	08003695 	.word	0x08003695
 8003570:	0800364d 	.word	0x0800364d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	4a7c      	ldr	r2, [pc, #496]	; (800376c <HAL_TIM_PWM_Start_DMA+0x368>)
 800357a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	4a7b      	ldr	r2, [pc, #492]	; (8003770 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	4a7a      	ldr	r2, [pc, #488]	; (8003774 <HAL_TIM_PWM_Start_DMA+0x370>)
 800358a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3334      	adds	r3, #52	; 0x34
 8003598:	461a      	mov	r2, r3
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	f7fe fc3e 	bl	8001e1c <HAL_DMA_Start_IT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0db      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b8:	60da      	str	r2, [r3, #12]
      break;
 80035ba:	e06e      	b.n	800369a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	4a6a      	ldr	r2, [pc, #424]	; (800376c <HAL_TIM_PWM_Start_DMA+0x368>)
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	4a69      	ldr	r2, [pc, #420]	; (8003770 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	4a68      	ldr	r2, [pc, #416]	; (8003774 <HAL_TIM_PWM_Start_DMA+0x370>)
 80035d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3338      	adds	r3, #56	; 0x38
 80035e0:	461a      	mov	r2, r3
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	f7fe fc1a 	bl	8001e1c <HAL_DMA_Start_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0b7      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003600:	60da      	str	r2, [r3, #12]
      break;
 8003602:	e04a      	b.n	800369a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a58      	ldr	r2, [pc, #352]	; (800376c <HAL_TIM_PWM_Start_DMA+0x368>)
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_TIM_PWM_Start_DMA+0x370>)
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	333c      	adds	r3, #60	; 0x3c
 8003628:	461a      	mov	r2, r3
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	f7fe fbf6 	bl	8001e1c <HAL_DMA_Start_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e093      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	60da      	str	r2, [r3, #12]
      break;
 800364a:	e026      	b.n	800369a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	4a45      	ldr	r2, [pc, #276]	; (8003770 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a44      	ldr	r2, [pc, #272]	; (8003774 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003662:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3340      	adds	r3, #64	; 0x40
 8003670:	461a      	mov	r2, r3
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	f7fe fbd2 	bl	8001e1c <HAL_DMA_Start_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06f      	b.n	8003762 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003690:	60da      	str	r2, [r3, #12]
      break;
 8003692:	e002      	b.n	800369a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      break;
 8003698:	bf00      	nop
  }

  if (status == HAL_OK)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d15f      	bne.n	8003760 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fefb 	bl	80044a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_TIM_PWM_Start_DMA+0x374>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_PWM_Start_DMA+0x2be>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	; (800377c <HAL_TIM_PWM_Start_DMA+0x378>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_TIM_PWM_Start_DMA+0x374>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d01d      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_TIM_PWM_Start_DMA+0x384>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_TIM_PWM_Start_DMA+0x388>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_TIM_PWM_Start_DMA+0x328>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d111      	bne.n	8003750 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d010      	beq.n	8003760 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0201 	orr.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374e:	e007      	b.n	8003760 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	08003dc1 	.word	0x08003dc1
 8003770:	08003e69 	.word	0x08003e69
 8003774:	08003d2f 	.word	0x08003d2f
 8003778:	40010000 	.word	0x40010000
 800377c:	40010400 	.word	0x40010400
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40001800 	.word	0x40001800

08003794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0202 	mvn.w	r2, #2
 80037c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa77 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa69 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fa7a 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0204 	mvn.w	r2, #4
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa4d 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fa3f 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fa50 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0208 	mvn.w	r2, #8
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa23 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fa15 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa26 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0210 	mvn.w	r2, #16
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2208      	movs	r2, #8
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f9f9 	bl	8003cca <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f9eb 	bl	8003cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f9fc 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0201 	mvn.w	r2, #1
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fb88 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 feae 	bl	80046a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f9cb 	bl	8003d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b20      	cmp	r3, #32
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b20      	cmp	r3, #32
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0220 	mvn.w	r2, #32
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fe78 	bl	800468c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039be:	2302      	movs	r3, #2
 80039c0:	e0ae      	b.n	8003b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	f200 809f 	bhi.w	8003b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003b11 	.word	0x08003b11
 80039e0:	08003b11 	.word	0x08003b11
 80039e4:	08003b11 	.word	0x08003b11
 80039e8:	08003a4d 	.word	0x08003a4d
 80039ec:	08003b11 	.word	0x08003b11
 80039f0:	08003b11 	.word	0x08003b11
 80039f4:	08003b11 	.word	0x08003b11
 80039f8:	08003a8f 	.word	0x08003a8f
 80039fc:	08003b11 	.word	0x08003b11
 8003a00:	08003b11 	.word	0x08003b11
 8003a04:	08003b11 	.word	0x08003b11
 8003a08:	08003acf 	.word	0x08003acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fafc 	bl	8004010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
      break;
 8003a4a:	e064      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fb4c 	bl	80040f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	021a      	lsls	r2, r3, #8
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	619a      	str	r2, [r3, #24]
      break;
 8003a8c:	e043      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fba1 	bl	80041dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0208 	orr.w	r2, r2, #8
 8003aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0204 	bic.w	r2, r2, #4
 8003ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	61da      	str	r2, [r3, #28]
      break;
 8003acc:	e023      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fbf5 	bl	80042c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69da      	ldr	r2, [r3, #28]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69d9      	ldr	r1, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	021a      	lsls	r2, r3, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	61da      	str	r2, [r3, #28]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_ConfigClockSource+0x1c>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0b4      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x186>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d03e      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0xd4>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	f200 8087 	bhi.w	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	f000 8086 	beq.w	8003c9a <HAL_TIM_ConfigClockSource+0x172>
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d87f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d01a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0xa6>
 8003b98:	2b70      	cmp	r3, #112	; 0x70
 8003b9a:	d87b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b60      	cmp	r3, #96	; 0x60
 8003b9e:	d050      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d877      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b50      	cmp	r3, #80	; 0x50
 8003ba6:	d03c      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d873      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d058      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x13a>
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d86f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d064      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d86b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d060      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d867      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d05a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	e062      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f000 fc41 	bl	8004464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	609a      	str	r2, [r3, #8]
      break;
 8003bfa:	e04f      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f000 fc2a 	bl	8004464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1e:	609a      	str	r2, [r3, #8]
      break;
 8003c20:	e03c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fb9e 	bl	8004370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2150      	movs	r1, #80	; 0x50
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fbf7 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 8003c40:	e02c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fbbd 	bl	80043ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2160      	movs	r1, #96	; 0x60
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fbe7 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 8003c60:	e01c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fb7e 	bl	8004370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2140      	movs	r1, #64	; 0x40
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fbd7 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 8003c80:	e00c      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 fbce 	bl	800442e <TIM_ITRx_SetConfig>
      break;
 8003c92:	e003      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      break;
 8003c98:	e000      	b.n	8003c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d107      	bne.n	8003d56 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d54:	e02a      	b.n	8003dac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2202      	movs	r2, #2
 8003d64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6e:	e01d      	b.n	8003dac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d107      	bne.n	8003d8a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	e010      	b.n	8003dac <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2208      	movs	r2, #8
 8003d98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da2:	e003      	b.n	8003dac <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff ffb4 	bl	8003d1a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d10b      	bne.n	8003df0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d136      	bne.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dee:	e031      	b.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10b      	bne.n	8003e12 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d125      	bne.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e10:	e020      	b.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d10b      	bne.n	8003e34 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d114      	bne.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e32:	e00f      	b.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d10a      	bne.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2208      	movs	r2, #8
 8003e42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d103      	bne.n	8003e54 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ff42 	bl	8003cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d103      	bne.n	8003e88 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	771a      	strb	r2, [r3, #28]
 8003e86:	e019      	b.n	8003ebc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d103      	bne.n	8003e9a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
 8003e98:	e010      	b.n	8003ebc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d103      	bne.n	8003eac <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	771a      	strb	r2, [r3, #28]
 8003eaa:	e007      	b.n	8003ebc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d102      	bne.n	8003ebc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ff18 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3d      	ldr	r2, [pc, #244]	; (8003fe8 <TIM_Base_SetConfig+0x118>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d027      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <TIM_Base_SetConfig+0x118>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d023      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d017      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a27      	ldr	r2, [pc, #156]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <TIM_Base_SetConfig+0x130>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <TIM_Base_SetConfig+0x134>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a24      	ldr	r2, [pc, #144]	; (8004008 <TIM_Base_SetConfig+0x138>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <TIM_Base_SetConfig+0x13c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40010400 	.word	0x40010400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800
 8004004:	40001800 	.word	0x40001800
 8004008:	40001c00 	.word	0x40001c00
 800400c:	40002000 	.word	0x40002000

08004010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 0302 	bic.w	r3, r3, #2
 8004058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <TIM_OC1_SetConfig+0xd8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_OC1_SetConfig+0x64>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <TIM_OC1_SetConfig+0xdc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0308 	bic.w	r3, r3, #8
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <TIM_OC1_SetConfig+0xd8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_OC1_SetConfig+0x8e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a14      	ldr	r2, [pc, #80]	; (80040ec <TIM_OC1_SetConfig+0xdc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010400 	.word	0x40010400

080040f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f023 0210 	bic.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <TIM_OC2_SetConfig+0xe4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC2_SetConfig+0x68>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <TIM_OC2_SetConfig+0xe8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10d      	bne.n	8004174 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <TIM_OC2_SetConfig+0xe4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_OC2_SetConfig+0x94>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <TIM_OC2_SetConfig+0xe8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d113      	bne.n	80041ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800418a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40010400 	.word	0x40010400

080041dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a21      	ldr	r2, [pc, #132]	; (80042bc <TIM_OC3_SetConfig+0xe0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_OC3_SetConfig+0x66>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a20      	ldr	r2, [pc, #128]	; (80042c0 <TIM_OC3_SetConfig+0xe4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10d      	bne.n	800425e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC3_SetConfig+0xe0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_OC3_SetConfig+0x92>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <TIM_OC3_SetConfig+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d113      	bne.n	8004296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800427c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	621a      	str	r2, [r3, #32]
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40010400 	.word	0x40010400

080042c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800430e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <TIM_OC4_SetConfig+0xa4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_OC4_SetConfig+0x68>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a11      	ldr	r2, [pc, #68]	; (800436c <TIM_OC4_SetConfig+0xa8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d109      	bne.n	8004340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40010400 	.word	0x40010400

08004370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0201 	bic.w	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800439a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f023 030a 	bic.w	r3, r3, #10
 80043ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b087      	sub	sp, #28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0210 	bic.w	r2, r3, #16
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	031b      	lsls	r3, r3, #12
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800440a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	f043 0307 	orr.w	r3, r3, #7
 8004450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	609a      	str	r2, [r3, #8]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	431a      	orrs	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4313      	orrs	r3, r2
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2201      	movs	r2, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	401a      	ands	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004504:	2302      	movs	r3, #2
 8004506:	e05a      	b.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d022      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d01d      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d018      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00e      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10c      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40001800 	.word	0x40001800

080045e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004600:	2302      	movs	r3, #2
 8004602:	e03d      	b.n	8004680 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e03f      	b.n	8004746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc fe20 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f829 	bl	8004750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800470c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800471c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800472c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004754:	b0c0      	sub	sp, #256	; 0x100
 8004756:	af00      	add	r7, sp, #0
 8004758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	68d9      	ldr	r1, [r3, #12]
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	ea40 0301 	orr.w	r3, r0, r1
 8004778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	431a      	orrs	r2, r3
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	431a      	orrs	r2, r3
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047a8:	f021 010c 	bic.w	r1, r1, #12
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047b6:	430b      	orrs	r3, r1
 80047b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ca:	6999      	ldr	r1, [r3, #24]
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	ea40 0301 	orr.w	r3, r0, r1
 80047d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <UART_SetConfig+0x2cc>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d005      	beq.n	80047f0 <UART_SetConfig+0xa0>
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b8d      	ldr	r3, [pc, #564]	; (8004a20 <UART_SetConfig+0x2d0>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d104      	bne.n	80047fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fe fc20 	bl	8003034 <HAL_RCC_GetPCLK2Freq>
 80047f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047f8:	e003      	b.n	8004802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fa:	f7fe fc07 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 80047fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	f040 810c 	bne.w	8004a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004814:	2200      	movs	r2, #0
 8004816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800481a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800481e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	1891      	adds	r1, r2, r2
 8004828:	65b9      	str	r1, [r7, #88]	; 0x58
 800482a:	415b      	adcs	r3, r3
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004832:	4621      	mov	r1, r4
 8004834:	eb12 0801 	adds.w	r8, r2, r1
 8004838:	4629      	mov	r1, r5
 800483a:	eb43 0901 	adc.w	r9, r3, r1
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800484a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800484e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004852:	4690      	mov	r8, r2
 8004854:	4699      	mov	r9, r3
 8004856:	4623      	mov	r3, r4
 8004858:	eb18 0303 	adds.w	r3, r8, r3
 800485c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004860:	462b      	mov	r3, r5
 8004862:	eb49 0303 	adc.w	r3, r9, r3
 8004866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800486a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800487a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800487e:	460b      	mov	r3, r1
 8004880:	18db      	adds	r3, r3, r3
 8004882:	653b      	str	r3, [r7, #80]	; 0x50
 8004884:	4613      	mov	r3, r2
 8004886:	eb42 0303 	adc.w	r3, r2, r3
 800488a:	657b      	str	r3, [r7, #84]	; 0x54
 800488c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004894:	f7fb fcaa 	bl	80001ec <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4b61      	ldr	r3, [pc, #388]	; (8004a24 <UART_SetConfig+0x2d4>)
 800489e:	fba3 2302 	umull	r2, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	011c      	lsls	r4, r3, #4
 80048a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048aa:	2200      	movs	r2, #0
 80048ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048b8:	4642      	mov	r2, r8
 80048ba:	464b      	mov	r3, r9
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	64b9      	str	r1, [r7, #72]	; 0x48
 80048c0:	415b      	adcs	r3, r3
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048c8:	4641      	mov	r1, r8
 80048ca:	eb12 0a01 	adds.w	sl, r2, r1
 80048ce:	4649      	mov	r1, r9
 80048d0:	eb43 0b01 	adc.w	fp, r3, r1
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e8:	4692      	mov	sl, r2
 80048ea:	469b      	mov	fp, r3
 80048ec:	4643      	mov	r3, r8
 80048ee:	eb1a 0303 	adds.w	r3, sl, r3
 80048f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f6:	464b      	mov	r3, r9
 80048f8:	eb4b 0303 	adc.w	r3, fp, r3
 80048fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800490c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
 8004922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800492a:	f7fb fc5f 	bl	80001ec <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4611      	mov	r1, r2
 8004934:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <UART_SetConfig+0x2d4>)
 8004936:	fba3 2301 	umull	r2, r3, r3, r1
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2264      	movs	r2, #100	; 0x64
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	1acb      	subs	r3, r1, r3
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <UART_SetConfig+0x2d4>)
 800494c:	fba3 2302 	umull	r2, r3, r3, r2
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004958:	441c      	add	r4, r3
 800495a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800496c:	4642      	mov	r2, r8
 800496e:	464b      	mov	r3, r9
 8004970:	1891      	adds	r1, r2, r2
 8004972:	63b9      	str	r1, [r7, #56]	; 0x38
 8004974:	415b      	adcs	r3, r3
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800497c:	4641      	mov	r1, r8
 800497e:	1851      	adds	r1, r2, r1
 8004980:	6339      	str	r1, [r7, #48]	; 0x30
 8004982:	4649      	mov	r1, r9
 8004984:	414b      	adcs	r3, r1
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004994:	4659      	mov	r1, fp
 8004996:	00cb      	lsls	r3, r1, #3
 8004998:	4651      	mov	r1, sl
 800499a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800499e:	4651      	mov	r1, sl
 80049a0:	00ca      	lsls	r2, r1, #3
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	4603      	mov	r3, r0
 80049a8:	4642      	mov	r2, r8
 80049aa:	189b      	adds	r3, r3, r2
 80049ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b0:	464b      	mov	r3, r9
 80049b2:	460a      	mov	r2, r1
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049d0:	460b      	mov	r3, r1
 80049d2:	18db      	adds	r3, r3, r3
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d6:	4613      	mov	r3, r2
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049e6:	f7fb fc01 	bl	80001ec <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <UART_SetConfig+0x2d4>)
 80049f0:	fba3 1302 	umull	r1, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	2164      	movs	r1, #100	; 0x64
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	3332      	adds	r3, #50	; 0x32
 8004a02:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <UART_SetConfig+0x2d4>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4422      	add	r2, r4
 8004a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a18:	e105      	b.n	8004c26 <UART_SetConfig+0x4d6>
 8004a1a:	bf00      	nop
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	40011400 	.word	0x40011400
 8004a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	1891      	adds	r1, r2, r2
 8004a40:	6239      	str	r1, [r7, #32]
 8004a42:	415b      	adcs	r3, r3
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
 8004a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	1854      	adds	r4, r2, r1
 8004a4e:	4649      	mov	r1, r9
 8004a50:	eb43 0501 	adc.w	r5, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	00eb      	lsls	r3, r5, #3
 8004a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a62:	00e2      	lsls	r2, r4, #3
 8004a64:	4614      	mov	r4, r2
 8004a66:	461d      	mov	r5, r3
 8004a68:	4643      	mov	r3, r8
 8004a6a:	18e3      	adds	r3, r4, r3
 8004a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a70:	464b      	mov	r3, r9
 8004a72:	eb45 0303 	adc.w	r3, r5, r3
 8004a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a96:	4629      	mov	r1, r5
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	008a      	lsls	r2, r1, #2
 8004aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004aa8:	f7fb fba0 	bl	80001ec <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	011c      	lsls	r4, r3, #4
 8004aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	61b9      	str	r1, [r7, #24]
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004adc:	4641      	mov	r1, r8
 8004ade:	1851      	adds	r1, r2, r1
 8004ae0:	6139      	str	r1, [r7, #16]
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	414b      	adcs	r3, r1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af4:	4659      	mov	r1, fp
 8004af6:	00cb      	lsls	r3, r1, #3
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afe:	4651      	mov	r1, sl
 8004b00:	00ca      	lsls	r2, r1, #3
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	4642      	mov	r2, r8
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b10:	464b      	mov	r3, r9
 8004b12:	460a      	mov	r2, r1
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b34:	4649      	mov	r1, r9
 8004b36:	008b      	lsls	r3, r1, #2
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b3e:	4641      	mov	r1, r8
 8004b40:	008a      	lsls	r2, r1, #2
 8004b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b46:	f7fb fb51 	bl	80001ec <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004b50:	fba3 1302 	umull	r1, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	2164      	movs	r1, #100	; 0x64
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	3332      	adds	r3, #50	; 0x32
 8004b62:	4a34      	ldr	r2, [pc, #208]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6e:	441c      	add	r4, r3
 8004b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b74:	2200      	movs	r2, #0
 8004b76:	673b      	str	r3, [r7, #112]	; 0x70
 8004b78:	677a      	str	r2, [r7, #116]	; 0x74
 8004b7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b7e:	4642      	mov	r2, r8
 8004b80:	464b      	mov	r3, r9
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	415b      	adcs	r3, r3
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b8e:	4641      	mov	r1, r8
 8004b90:	1851      	adds	r1, r2, r1
 8004b92:	6039      	str	r1, [r7, #0]
 8004b94:	4649      	mov	r1, r9
 8004b96:	414b      	adcs	r3, r1
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	00cb      	lsls	r3, r1, #3
 8004baa:	4651      	mov	r1, sl
 8004bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb0:	4651      	mov	r1, sl
 8004bb2:	00ca      	lsls	r2, r1, #3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4642      	mov	r2, r8
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	460a      	mov	r2, r1
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8004bd4:	667a      	str	r2, [r7, #100]	; 0x64
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004be2:	4649      	mov	r1, r9
 8004be4:	008b      	lsls	r3, r1, #2
 8004be6:	4641      	mov	r1, r8
 8004be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bec:	4641      	mov	r1, r8
 8004bee:	008a      	lsls	r2, r1, #2
 8004bf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004bf4:	f7fb fafa 	bl	80001ec <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	2164      	movs	r1, #100	; 0x64
 8004c06:	fb01 f303 	mul.w	r3, r1, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	3332      	adds	r3, #50	; 0x32
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <UART_SetConfig+0x4e4>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	f003 020f 	and.w	r2, r3, #15
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4422      	add	r2, r4
 8004c24:	609a      	str	r2, [r3, #8]
}
 8004c26:	bf00      	nop
 8004c28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c32:	bf00      	nop
 8004c34:	51eb851f 	.word	0x51eb851f

08004c38 <__libc_init_array>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	4d0d      	ldr	r5, [pc, #52]	; (8004c70 <__libc_init_array+0x38>)
 8004c3c:	4c0d      	ldr	r4, [pc, #52]	; (8004c74 <__libc_init_array+0x3c>)
 8004c3e:	1b64      	subs	r4, r4, r5
 8004c40:	10a4      	asrs	r4, r4, #2
 8004c42:	2600      	movs	r6, #0
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	d109      	bne.n	8004c5c <__libc_init_array+0x24>
 8004c48:	4d0b      	ldr	r5, [pc, #44]	; (8004c78 <__libc_init_array+0x40>)
 8004c4a:	4c0c      	ldr	r4, [pc, #48]	; (8004c7c <__libc_init_array+0x44>)
 8004c4c:	f000 f820 	bl	8004c90 <_init>
 8004c50:	1b64      	subs	r4, r4, r5
 8004c52:	10a4      	asrs	r4, r4, #2
 8004c54:	2600      	movs	r6, #0
 8004c56:	42a6      	cmp	r6, r4
 8004c58:	d105      	bne.n	8004c66 <__libc_init_array+0x2e>
 8004c5a:	bd70      	pop	{r4, r5, r6, pc}
 8004c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c60:	4798      	blx	r3
 8004c62:	3601      	adds	r6, #1
 8004c64:	e7ee      	b.n	8004c44 <__libc_init_array+0xc>
 8004c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c6a:	4798      	blx	r3
 8004c6c:	3601      	adds	r6, #1
 8004c6e:	e7f2      	b.n	8004c56 <__libc_init_array+0x1e>
 8004c70:	08004cd0 	.word	0x08004cd0
 8004c74:	08004cd0 	.word	0x08004cd0
 8004c78:	08004cd0 	.word	0x08004cd0
 8004c7c:	08004cd4 	.word	0x08004cd4

08004c80 <memset>:
 8004c80:	4402      	add	r2, r0
 8004c82:	4603      	mov	r3, r0
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <_init>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	bf00      	nop
 8004c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c96:	bc08      	pop	{r3}
 8004c98:	469e      	mov	lr, r3
 8004c9a:	4770      	bx	lr

08004c9c <_fini>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr
